[{"title":"xss研究之浏览器编码探究","url":"http://yoursite.com/2019/08/15/xss研究之浏览器编码探究/","content":"<p><strong>以下是根据网上文章字节理解整理的一篇文章，可能存在错误，&lt;__&gt;有错你也打不到我</strong></p>\n<h1 id=\"浏览器解码规则\"><a href=\"#浏览器解码规则\" class=\"headerlink\" title=\"浏览器解码规则\"></a>浏览器解码规则</h1><p><img src=\"/2019/08/15/xss研究之浏览器编码探究/1565924892380.png\" alt=\"图1\"></p>\n<p>说到浏览器规则便用这一张图来简单阐述。</p>\n<p>首先生成html和css的DOM树和CSSOM树，当遇到script时会中断DOM树的创建。了解浏览器渲染流程可以参考链接<a href=\"http://bobao.360.cn/learning/detail/292.html\" target=\"_blank\" rel=\"noopener\">html渲染</a>。</p>\n<h1 id=\"html解析器\"><a href=\"#html解析器\" class=\"headerlink\" title=\"html解析器\"></a>html解析器</h1><p>html渲染生成DOM树时&lt;且后面无/就进入”标签开始状态“，然后匹配到标签转变到“标签名状态”，“前属性名状态(before attribute name state)”……最后进入“数据状态(Data state)”并释放当前标签的token。当解析器处于“数据状态(Data state)”时，它会继续解析，每当发现一个完整的标签也就是匹配到“&gt;”，就会释放出一个token。</p>\n<p>也就是说我们是不能使用<code>&amp;#60;&amp;#62;</code>(&lt;&gt;)这样的实体来标识一个html标签这是不会被执行的，因为解析<code>&amp;#60;&amp;#62;</code>并不会进入标签开始状态，我们无法使用标签名的实体来绕过过滤，实际上标签名不能进行任何编码。</p>\n<h1 id=\"js解析器\"><a href=\"#js解析器\" class=\"headerlink\" title=\"js解析器\"></a>js解析器</h1><p>js编码是使用<code>\\uXXXX</code>这种写法为<code>Unicode</code>转义序列。js触发有<code>script</code>、on*时间和伪协议。</p>\n<h2 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h2><p><strong>script有个有趣的属性在块中的字符引用实体不会被解析和解码</strong>，也就是说<code>script</code>标签中不能使用实体编码来编码函数等。但能处理js编码但js编码不能编码引号等字符因为这样便无法执行xss。</p>\n<h2 id=\"on-事件\"><a href=\"#on-事件\" class=\"headerlink\" title=\"on*事件\"></a>on*事件</h2><p>思考两行代码<code>&lt;img src=1 onerror=ale\\u0072t(1)&gt;</code>和<code>&lt;img src=1 oner\\u0072or=alert(1)&gt;</code>两行代码</p>\n<p>会发现第一个代码弹框第二个代码未弹框,这是因为浏览器在处理到<code>onerror</code>时便调用js解析器但对于<code>oner\\u0072or</code>浏览器并不会调用js解析器，浏览器在调用on事件时其实调用的对应on函数,具体处理可以看大佬调试ie的<a href=\"https://xz.aliyun.com/t/1556\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<h2 id=\"伪协议\"><a href=\"#伪协议\" class=\"headerlink\" title=\"伪协议\"></a>伪协议</h2><p><img src=\"/2019/08/15/xss研究之浏览器编码探究/1565935108396.png\" alt=\"1565935108396\"></p>\n<p>上面的代码放到浏览器能弹框，为什么对javascript进行实体还能弹框呢？首先浏览器对代码进行html解码</p>\n<p><img src=\"/2019/08/15/xss研究之浏览器编码探究/1565935142519.png\" alt=\"1565935142519\"></p>\n<p>之后这里多了一层调用url解析器,url解析器去识别了javascript伪协议，<strong>注意url解析不能识别任何编码后的协议类型</strong>这里是由于html解码发生在url解析前所以才能解析。最后url解析器解析了</p>\n<p>%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30</p>\n<p>%30%37%32%5c%75%30%30%37%34</p>\n<p>再由js解析器解析。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://security.yirendai.com/news/share/26\" target=\"_blank\" rel=\"noopener\">https://security.yirendai.com/news/share/26</a></p>\n<p><a href=\"https://xz.aliyun.com/t/1556\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/1556</a></p>\n<p><a href=\"https://www.yuque.com/kkdlong/eiwne5/fpl8ob?language=en-us\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/kkdlong/eiwne5/fpl8ob?language=en-us</a></p>\n","categories":[],"tags":["xss","编码"]},{"title":"安卓基础检测","url":"http://yoursite.com/2018/03/02/安卓反编译与打包/","content":"<h2 id=\"工具、环境准备\"><a href=\"#工具、环境准备\" class=\"headerlink\" title=\"工具、环境准备\"></a>工具、环境准备</h2><p>1.java环境安装<br>2.apktool</p>\n<p>3.drozer安装，<a href=\"https://www.cnblogs.com/lsdb/p/9441813.html\" target=\"_blank\" rel=\"noopener\">安装教程</a></p>\n<h2 id=\"反编译与打包\"><a href=\"#反编译与打包\" class=\"headerlink\" title=\"反编译与打包\"></a>反编译与打包</h2><p>使用apktool将apk再反编译成文件(以下app名字为forinfor.apk,)<br><code>java -jar apktool.jar d -f forinfor.apk -o forinfor</code></p>\n<p>再将文件夹重新编译为apk文件</p>\n<p><code>apktool b forinfor -o newforinfor.apk</code></p>\n<p>再生成对应的签名文件</p>\n<p><code>keytool -genkeypair -v -keystore xample.keystore -alias test(这里是签名的别名) -keyalg RSA</code></p>\n<p><code>-keysize2048 -validity 10000</code></p>\n<p>完成签名文件的信息填写之后再用签名文件打包(这里如果出现乱码输入chcp 936)</p>\n<p><code>jarsigner -keystore xample.keystore -digestalg SHA1 -sigalg SHA1withRSA newforinfor.apk</code></p>\n<p><code>test(别名)</code></p>\n<h1 id=\"组件测试\"><a href=\"#组件测试\" class=\"headerlink\" title=\"组件测试\"></a>组件测试</h1><p>安卓有四大组件activity,service,broadcast receiver,content provider。activity组件就是我们常规看到的页面，app的每个页面都可以看作一个activity组件。service就是没有页面的服务，提供运算支持。broadcast receiver是对系统的广播，content provider是处理手机数据库的组件，用于存取数据。</p>\n<p>安装完drozer之后,在Android启动drozer的app，打开端口监听。</p>\n<p><code>adb forward tcp:31415 tcp:31415</code>端口转发。</p>\n<p><code>drozer.bat console connect</code>启动drozer,<strong>注意这里需要在drozer安装目录中启动drozer不然在运行一些命令会报错。</strong></p>\n<p><code>run app.package.list</code>查看模拟器安装的app名。这里看不见的话可以使用adb shell到Android安装目录/data/app查看,/data/data里也能看到包名，这是程序的数据存放目录。</p>\n<p>注:以下组件调用可能存在本地拒绝服务攻击。</p>\n<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><p><code>run app.activity.info -a 包名</code>这里就会显示出所有可调用的包名。</p>\n<p><code>run app.activity.start --component 包名 组件名</code>这里主要是看通过调用组件能否调用一些敏感信息功能页面。</p>\n<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><p><code>run app.service.info -a 包名</code>这里是可以查看可调用的服务名。</p>\n<p><code>run app.service.start --action 服务名 --component 包名 服务名</code>调用服务组件</p>\n<h2 id=\"broadcast\"><a href=\"#broadcast\" class=\"headerlink\" title=\"broadcast\"></a>broadcast</h2><p><code>run app.broadcast.info -a 包名</code>这里是可以查看可调用的广播名。</p>\n<p><code>run app.broadcast.send --component 包名 广播名 --extra string phoneNumber 222</code>查看恶意广播</p>\n<p><code>run app.broadcast.send --component 包名 广播名</code>本地DOS检测</p>\n<h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h2><p><code>run scanner.provider.injection -a 包名</code>检测sql注入</p>\n<p><code>run scanner.provider.traversal -a 包名</code>检测目录遍历漏洞</p>\n<p><code>run app.provider.read Content泄露组件名 文件目录</code>查看本机中的文件</p>\n<p><code>run app.provider.read Content组件名 /etc/hosts</code>查看本机的域名配置文件</p>\n<h1 id=\"WebView组件\"><a href=\"#WebView组件\" class=\"headerlink\" title=\"WebView组件\"></a>WebView组件</h1><h2 id=\"WebView代码执行检测\"><a href=\"#WebView代码执行检测\" class=\"headerlink\" title=\"WebView代码执行检测\"></a>WebView代码执行检测</h2><p>webview代码执行主要是由于低版本安卓上addJavascriptInterface功能无限制，当JS拿到Android这个对象后，就可以调用这个Android对象中所有的方法，包括系统类（java.lang.Runtime 类），从而进行任意代码执行。</p>\n<h4 id=\"Android-4-2版本之后\"><a href=\"#Android-4-2版本之后\" class=\"headerlink\" title=\"Android 4.2版本之后\"></a>Android 4.2版本之后</h4><p>Google 在Android 4.2 版本中规定对被调用的函数以 <code>@JavascriptInterface</code>进行注解从而避免漏洞攻击。</p>\n<h4 id=\"Android-4-2版本之前\"><a href=\"#Android-4-2版本之前\" class=\"headerlink\" title=\"Android 4.2版本之前\"></a>Android 4.2版本之前</h4><p>重写JavascriptInterface方法</p>\n<p><strong>searchBoxJavaBridge_、accessibility和 accessibilityTraversal组件在低版本也存在任意代码执行。</strong></p>\n<h2 id=\"WebView不校验证书检测\"><a href=\"#WebView不校验证书检测\" class=\"headerlink\" title=\"WebView不校验证书检测\"></a>WebView不校验证书检测</h2><p>搜索onReceivedSslError，调用了process()方法的话就会忽略掉证书的错误继续执行。</p>\n<h2 id=\"域控制不严格漏洞\"><a href=\"#域控制不严格漏洞\" class=\"headerlink\" title=\"域控制不严格漏洞\"></a>域控制不严格漏洞</h2><p>通过使用恶意代码来读取本地文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setAllowFileAccess(false); //禁用file协议读取</span><br><span class=\"line\">setAllowFileAccessFromFileURLs(false);</span><br><span class=\"line\">setAllowUniversalAccessFromFileURLs(false);</span><br></pre></td></tr></table></figure>\n\n<p>即使禁用依旧可以通过<strong>符号链接跨源攻击</strong>，<strong>通过 javascript 的延时执行和将当前文件替换成指向其它文件的软链接就可以读取到被符号链接所指的文件</strong></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.jianshu.com/p/3a345d27cd42\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3a345d27cd42</a></p>\n<p><a href=\"https://www.cnblogs.com/laughingQing/p/6392455.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/laughingQing/p/6392455.html</a></p>\n","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"文章分类","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]}]